/* tslint:disable:no-unused-variable member-ordering */
import * as models from '../model/models';
import * as auth from './auth';

{{#operations}}
'use strict';
                                 	
{{#description}}
    /**
    * {{&description}}
    */
{{/description}}
    export class {{classname}} {
        protected basePath = '{{basePath}}';
        public defaultHeaders : any = {};

        static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

        constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
            if (basePath !== undefined) {
                this.basePath = basePath;
            }
        }
        
        public authentications = {
        'default': <auth.Authentication>new auth.VoidAuth(),
        'oauth2': new auth.OAuth(),
{{#authMethods}}
{{#isBasic}}
        '{{name}}': new auth.HttpBasicAuth(),
{{/isBasic}}
{{#isApiKey}}
        '{{name}}': new auth.ApiKeyAuth({{#isKeyInHeader}}'header'{{/isKeyInHeader}}{{^isKeyInHeader}}'query'{{/isKeyInHeader}}, '{{keyParamName}}'),
{{/isApiKey}}
{{#isOAuth}}
        '{{name}}': new auth.OAuth(),
{{/isOAuth}}
{{/authMethods}}
    }
    
    set accessToken(token: string) {
        this.authentications.oauth2.accessToken = token;
    }
    
{{#authMethods}}
{{#isBasic}}

    set username(username: string) {
        this.authentications.{{name}}.username = username;
    }

    set password(password: string) {
        this.authentications.{{name}}.password = password;
    }
{{/isBasic}}
{{#isApiKey}}

    set apiKey(key: string) {
        this.authentications.{{name}}.apiKey = key;
    }
{{/isApiKey}}

{{/authMethods}}

        private extendObj<T1,T2>(objA: T1, objB: T2) {
            for(let key in objB) {
                if(objB.hasOwnProperty(key)) {
                    objA[key] = objB[key];
                }
            }
            return <T1&T2>objA;
        }

{{#operation}}
        /**
         * {{summary}}
         * {{notes}}
         {{#allParams}}* @param {{paramName}} {{description}}
         {{/allParams}}*/
        public {{nickname}} ({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}extraHttpRequestParams?: any ) : ng.IHttpPromise<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}{}{{/returnType}}> {
            const localVarPath = this.basePath + '{{path}}'{{#pathParams}}
                .replace('{' + '{{baseName}}' + '}', String({{paramName}})){{/pathParams}};

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
{{#hasFormParams}}
            let formParams: any = {};

{{/hasFormParams}}
{{#allParams}}
{{#required}}
            // verify required parameter '{{paramName}}' is not null or undefined
            if ({{paramName}} === null || {{paramName}} === undefined) {
                throw new Error('Required parameter {{paramName}} was null or undefined when calling {{nickname}}.');
            }
{{/required}}
{{/allParams}}
{{#queryParams}}
            if ({{paramName}} !== undefined) {
                queryParameters['{{baseName}}'] = {{paramName}};
            }

{{/queryParams}}
{{#headerParams}}
            headerParams['{{baseName}}'] = {{paramName}};

{{/headerParams}}
{{#hasFormParams}}
            headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

{{/hasFormParams}}
{{#formParams}}
            formParams['{{baseName}}'] = {{paramName}};

{{/formParams}}
            let httpRequestParams: any = {
                method: '{{httpMethod}}',
                url: localVarPath,
                json: {{#hasFormParams}}false{{/hasFormParams}}{{^hasFormParams}}true{{/hasFormParams}},
                {{#bodyParam}}data: {{paramName}},
                {{/bodyParam}}
                {{#hasFormParams}}data: this.$httpParamSerializer(formParams),
                {{/hasFormParams}}
                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }
            
            {{#authMethods}}
                this.authentications.{{name}}.applyToRequest(httpRequestParams);
            {{/authMethods}}
            this.authentications.default.applyToRequest(httpRequestParams);

            return this.$http(httpRequestParams);
        }
{{/operation}}
    }
{{/operations}}
